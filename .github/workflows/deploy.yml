# =================================================================
# Gemini 老师优化版 - 结合教程并增加清晰注释和最佳实践
# =================================================================
name: Build and Deploy Shiro
on:
  workflow_dispatch: # 允许在 GitHub 页面手动点击运行
  push:
    branches:
      - main # 当 main 分支有更新时自动运行

permissions: write-all
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PNPM_VERSION: 9.x.x
  HASH_FILE: build_hash

jobs:
  # ... [prepare 和 check 任务与教程完全相同，无需修改] ...
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    if: ${{ github.event.head_commit.message != 'Update hash file' }}
    outputs:
      hash_content: ${{ steps.read_hash.outputs.hash_content }}
    steps:
      - name: Checkout local repository
        uses: actions/checkout@v4
      - name: Read HASH_FILE content
        id: read_hash
        run: |
          content=$(cat ${{ env.HASH_FILE }}) || true
          echo "hash_content=$content" >> "$GITHUB_OUTPUT"
  check:
    name: Check Should Rebuild
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      canceled: ${{ steps.use_content.outputs.canceled }}
    steps:
      - name: Checkout Shiro repository
        uses: actions/checkout@v4
        with:
          # 【请根据您的情况修改】
          # 如果您使用 Shiro 闭源版，请填写 'innei-dev/shiroi'
          # 如果您使用 Shiro 开源版，请填写 'innei/shiro'
          repository: innei/shiro
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          lfs: true
      - name: Compare with last deployed hash
        id: use_content
        env:
          FILE_HASH: ${{ needs.prepare.outputs.hash_content }}
        run: |
          file_hash=$FILE_HASH
          current_hash=$(git rev-parse --short HEAD)
          echo "Last Deployed Hash: $file_hash"
          echo "Current Git Hash: $current_hash"
          if [ "$file_hash" == "$current_hash" ]; then
            echo "Hashes match. No new commits to build. Stopping workflow."
            echo "canceled=true" >> $GITHUB_OUTPUT
          else
            echo "Hashes do not match. Continuing workflow."
          fi

  # ... [build 任务与教程完全相同，无需修改] ...
  build:
    name: Build artifact
    runs-on: ubuntu-latest
    needs: check
    if: ${{needs.check.outputs.canceled != 'true'}}
    strategy:
      matrix:
        node-version: [20.x]
    outputs:
      sha_short: ${{ steps.store.outputs.sha_short }}
    steps:
      - name: Checkout Shiro repository for build
        uses: actions/checkout@v4
        with:
          repository: innei/shiro # 同样，这里要和 check 任务中的保持一致
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          lfs: true
      - name: Checkout LFS objects
        run: git lfs checkout
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - name: Cache Next.js build
        uses: jongwooo/next-cache@v1
      - name: Install dependencies
        run: pnpm install
      - name: Build project
        run: sh ./ci-release-build.sh
      - name: Cache Build Artifacts
        id: cache-primes
        uses: actions/cache/save@v4
        with:
          path: assets
          key: ${{ github.run_number }}-release
      - name: Store artifact commit version
        shell: bash
        id: store
        run: |
          sha_short=$(git rev-parse --short HEAD)
          echo "sha_short=$sha_short" >> "$GITHUB_OUTPUT"

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Restore cached Build Artifacts
        uses: actions/cache/restore@v4
        with:
          path: assets
          key: ${{ github.run_number }}-release
      - name: Move assets to root
        run: mv assets/release.zip release.zip

      - name: Copy release file to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }} # 服务器 IP 地址
          username: ${{ secrets.USER }} # 服务器登录用户名 (如 root)
          port: ${{ secrets.PORT }} # 服务器 SSH 端口 (默认 22)
          source: 'release.zip'
          target: '/tmp/shiro'
          # 【重要：认证方式二选一】
          # 方式一：使用密码 (推荐初学者使用，最简单)
          password: ${{ secrets.PASSWORD }}
          # 方式二：使用 SSH Key (如果使用这种，请删除上面一行 password)
          # key: ${{ secrets.KEY }}

      - name: Execute deploy script on server
        uses: appleboy/ssh-action@master
        with:
          command_timeout: 5m
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          port: ${{ secrets.PORT }}
          # 【重要：认证方式二选一，与上一步保持一致】
          # 方式一：使用密码
          password: ${{ secrets.PASSWORD }}
          # 方式二：使用 SSH Key
          # key: ${{ secrets.KEY }}
          
          # 部署脚本 (与教程基本一致，增加了注释)
          script: |
            set -e # 任何命令失败则立刻停止，防止部署不完整
            
            # --- 1. 定位并准备环境 ---
            export NVM_DIR=~/.nvm # 定义NVM的安装目录，防止找不到命令
            source ~/.nvm/nvm.sh # 加载NVM命令
            source $HOME/.bashrc # 加载环境变量

            # --- 2. 准备部署目录 ---
            # 您希望将 shiro 前端部署在服务器的哪个位置
            basedir=$HOME/mx-space/shiro
            workdir=$basedir/${{ github.run_number }} # 使用 GitHub Action 的运行编号作为本次部署的独立目录
            
            echo "Creating directory: $workdir"
            mkdir -p $workdir
            mkdir -p $basedir/.cache # 创建一个持久化的缓存目录

            # --- 3. 移动并解压部署包 ---
            echo "Moving release file..."
            mv /tmp/shiro/release.zip $workdir/release.zip
            
            echo "Unzipping release file..."
            cd $workdir
            unzip -qq -o $workdir/release.zip # -qq 静默模式 -o 覆盖
            
            # --- 4. 配置软链接和环境变量 ---
            # 删除解压出来的.env文件，因为它不包含我们的密钥
            rm -rf $workdir/standalone/.env
            # 链接到我们自己配置的 .env 文件 (此文件需要您在 basedir 手动创建)
            ln -sfn $HOME/mx-space/shiro/.env $workdir/standalone/.env
            
            # 修复 sharp 库的路径问题
            export NEXT_SHARP_PATH=$(npm root -g)/sharp

            # --- 5. 配置并启动 PM2 ---
            # 如果是首次部署, 拷贝pm2配置文件到基础目录
            if [ ! -f $basedir/ecosystem.config.js ]; then
              cp $workdir/standalone/ecosystem.config.js $basedir/ecosystem.config.js
            fi

            # 创建或更新 server.js 的软链接, 指向本次部署的启动文件
            ln -sfn $workdir/standalone/server.js $basedir/server.js
            
            # 创建或更新 .next/cache 的软链接, 指向持久化缓存目录, 加快启动速度
            mkdir -p $workdir/standalone/.next
            rm -rf $workdir/standalone/.next/cache
            ln -sfn $basedir/.cache $workdir/standalone/.next/cache
            
            # 进入基础目录, 使用 PM2 重载服务
            cd $basedir
            # 'reload' 会实现 0 秒停机重载, 比 'restart' 更好
            pm2 reload ecosystem.config.js --update-env
            
            # --- 6. 清理工作 ---
            rm $workdir/release.zip # 删除压缩包
            pm2 save # 保存当前 PM2 进程列表, 以便服务器重启后能自动恢复
            
            echo "✅ Deployed successfully!"

  # ... [store 任务与教程完全相同，无需修改] ...
  store:
    name: Store artifact commit version
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: Checkout local repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: Use artifact version from build job
        id: use_outputs
        env:
          SHA_SHORT: ${{ needs.build.outputs.sha_short }}
        run: echo "sha_short=${SHA_SHORT}" >> "$GITHUB_OUTPUT"
      - name: Write hash to file
        run: echo "${{ steps.use_outputs.outputs.sha_short }}" > ${{ env.HASH_FILE }}
      - name: Commit and push hash file
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add ${{ env.HASH_FILE }}
          git commit -a -m "Update hash file"
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}